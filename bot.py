# –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pandas as pd
import schedule as sl
from openpyxl import load_workbook

from google.protobuf.timestamp_pb2 import Timestamp

# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
import sys
import time
from datetime import datetime, timedelta

# –º–æ–¥—É–ª–∏
import config
import sub
import strategy as st
import analyst as at
from service.tgSend import message_to as msg

sys.path.append('service')
from service import marketdata_pb2, marketdata_pb2_grpc, operations_pb2_grpc, operations_pb2, orders_pb2_grpc, orders_pb2, grpcConnection as gCon
from service.sandbox import money_info


token = config.sandboxToken
account = config.sandbox_id
channel = gCon.conn(config.sandboxApi)


def pick_candles(x, per='1_MIN', j=0):
    try:
        candles_stub = marketdata_pb2_grpc.MarketDataServiceStub(channel)
        t = (datetime.now() - timedelta(days=j + 1)).timestamp()
        seconds1 = int(t)
        nanos1 = int(t % 1 * 1e9)
        t2 = (datetime.now() - timedelta(days=j)).timestamp()
        seconds2 = int(t2)
        nanos2 = int(t2 % 1 * 1e9)
        start_time = Timestamp(seconds=seconds1, nanos=nanos1)
        end_time = Timestamp(seconds=seconds2, nanos=nanos2)
        kwargs = {
            'figi': x.figi,
            'from': start_time,
            'to': end_time,
            'interval': 'CANDLE_INTERVAL_' + per
        }

        historical_candles = candles_stub.GetCandles(marketdata_pb2.GetCandlesRequest(**kwargs), metadata=token)
        return historical_candles.candles
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ {x['name']}, –û–®–ò–ë–ö–ê:", str(e))


def trading_status(figi):
    try:
        candles_stub = marketdata_pb2_grpc.MarketDataServiceStub(channel)
        ts = candles_stub.GetTradingStatus(marketdata_pb2.GetTradingStatusRequest(figi=figi), metadata=token)
        print(f"—Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤: {ts.trading_status}")
        return ts.market_order_available_flag
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–∏—Ä–∂–∏, –û–®–ò–ë–ö–ê:", str(e))


def new_df(candles, x):
    try:
        if not candles:
            return print(f"–ü—Ä–∏—à–µ–ª –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á {x['name']}")
        pd.set_option('display.max_rows', None)
        df = pd.DataFrame([{
            'time': sub.no_timestamp(c.time.seconds),
            'volume': c.volume,
            'open': sub.price(c.open),
            'close': sub.price(c.close),
            'high': sub.price(c.high),
            'low': sub.price(c.low),
            'finish': c.is_complete
        } for c in candles])

        # –ø–ª–æ—Ö–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
        df_p = pd.DataFrame(df['close'])

        # –º–æ–¥—É–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –Ω—É–∂–Ω–æ —á–∏—Å—Ç–∏—Ç—å
        at.vol_density(df)
        at.acum(df, x.smooacum1, x.smooacum2)
        at.donchian(df)
        at.candle(df)
        at.HAiken(df)
        at.arunosc(df)
        at.cci_ind(df, x.per_cci, x.sm_cci)
        at.kauf(df, x.per_kama, x.offset_kama, x.kama_range)
        at.macd(df)
        at.rox(df, x.roc_per, x.sm1roc, x.sm2roc, x.roc_range)
        at.intensiv(df, x.flatTema1, x.smrngT1, x.smrngT2, x.offset1, x.sm1FlatTema1, x.sm2FlatTema1, x.flatRange1)
        at.EMA(df)
        at.pivot(df_p, x.highD, x.lowD, x.closeD, df, x.dev)
        at.priceDensity(df, x.atrPer, x.pdPer, x.sm1pd, x.sm2pd)
        at.angeCalc(df)
        at.bollinger_deal(df)
        at.bollinger_fix(df)
        at.tsindex(df)

        # –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ ?
        # df['level'] = df_p['level']
        # df['zona'] = df_p['zona']
        # df['vector_pivot'] = df_p['vector_pivot']

        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        st.door(x, df, df_p)
        st.status(x, df, df_p)
        st.fix(x, df, df_p)

        # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        mass = []
        for item in operation(x.figi).operations:
            if item.type != '–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é':
                date = sub.no_timestamp(item.date.seconds)
                mass.append(date)
        df['üåü'] = df.apply(lambda row: sub.check_match(row, mass), axis=1)

        # –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(df[['time', 'close', 'door', 'status', 'üåü', 'fix']].tail(10))
        return df
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∞—Ç–∞ —Ñ—Ä–µ–π–º, –û–®–ò–ë–ö–ê:", str(e))


def get_portfolio(figi):  # –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –æ–¥–Ω–∞–∂–¥—ã
    try:
        portfolio_stub = operations_pb2_grpc.OperationsServiceStub(channel)
        info = portfolio_stub.GetPortfolio(operations_pb2.PortfolioRequest(account_id=account), metadata=token)
        found = False
        for item in info.positions:
            if item.figi == figi:
                found = True
                if item.quantity.units < 0:
                    return "inShort"
                if item.quantity.units > 0:
                    return "inLong"
        if not found:
            return "void"
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ, –û–®–ò–ë–ö–ê:", str(e))


def operation(figi):
    operations_stub = operations_pb2_grpc.OperationsServiceStub(channel)
    t = (datetime.now() - timedelta(days=1)).timestamp()
    seconds1 = int(t)
    nanos1 = int(t % 1 * 1e9)
    t2 = (datetime.now() - timedelta(days=0)).timestamp()
    seconds2 = int(t2)
    nanos2 = int(t2 % 1 * 1e9)
    start_time = Timestamp(seconds=seconds1, nanos=nanos1)
    end_time = Timestamp(seconds=seconds2, nanos=nanos2)
    kwargs = {
        'account_id': account,
        'state': 1,
        'from': start_time,
        'to': end_time,
        'figi': figi
    }
    info = operations_stub.GetOperations(operations_pb2.OperationsRequest(**kwargs), metadata=token)
    return info


def make_deal(status, x):
    if get_portfolio(x.figi) != "void":
        return
    if status == 'BUY':
        go_trade(x['name'], x.figi, x['count'], 'BUY', '–ø–æ–∫—É–ø–∫–∞')
    if status == 'SHORT' and x.isShort != 'no':
        go_trade(x['name'], x.figi, x['count'], 'SELL', '–ø—Ä–æ–¥–∞–∂–∞')


def make_fix(x):
    portfolio = get_portfolio(x.figi)
    if portfolio == "void":
        return
    if portfolio == "inShort":
        go_trade(x['name'], x.figi, x['count'], 'BUY', '—Ñ–∏–∫—Å–∞—Ü–∏—è —à–æ—Ä—Ç–∞')
    if portfolio == "inLong":
        go_trade(x['name'], x.figi, x['count'], 'SELL', '—Ñ–∏–∫—Å–∞—Ü–∏—è –ª–æ–Ω–≥–∞')


def go_trade(name, figi, count, direction, deal):
    try:
        trade_stab = orders_pb2_grpc.OrdersServiceStub(channel)
        kwargs = {
            'figi': figi,
            'quantity': count,
            'direction': f"ORDER_DIRECTION_{direction}",
            'account_id': account,
            'order_type': 'ORDER_TYPE_MARKET',
            'order_id': str(datetime.now().timestamp())
        }
        res = trade_stab.PostOrder(orders_pb2.PostOrderRequest(**kwargs), metadata=token)
        if res.execution_report_status == 5:
            msg(f"–∑–∞—è–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏—á–Ω–æ ({name}), –∏—Å–ø–æ–ª–Ω–µ–Ω–æ {res.lots_executed} –∏–∑ {res.lots_requested}")
            return print(f"–∑–∞—è–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏—á–Ω–æ, –∏—Å–ø–æ–ª–Ω–µ–Ω–æ {res.lots_executed} –∏–∑ {res.lots_requested}")
        if res.execution_report_status != 1:
            msg(f"–Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É {direction} ({name})")
            return print(f"–Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É {direction}")
        # make_stop()
        money = sub.price(res.total_order_amount)
        commission = sub.price(res.executed_commission.units) if token == config.token else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ'
        msg(f"{deal.upper()} {name.upper()}, {res.lots_executed} –®–¢. \n–¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ {money} \nC—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏ {commission}\n{money_info()}")
        print(f"{deal.upper()} {name.upper()} –≤ —Ä–∞–∑–º–µ—Ä–µ {res.lots_executed} —à—Ç. –¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ {money}, —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏ {commission}")
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É, –û–®–ò–ë–ö–ê:", str(e))


def get_pivot(x, close, high, low):
    workbook = load_workbook('test.xlsx')
    sheet = workbook.active
    sheet['B' + str(x.name + 3)].value = close
    sheet['C' + str(x.name + 3)].value = high
    sheet['D' + str(x.name + 3)].value = low
    workbook.save('test.xlsx')


def preparation():
    excel = sub.load_excel()
    for index, row in excel.iterrows():
        pivot = pick_candles(row, 'DAY')[0]
        get_pivot(row, sub.price(pivot.close), sub.price(pivot.high), sub.price(pivot.low))
    return pd.read_excel('test.xlsx', skiprows=1)


def bot(x):
    if trading_status(x.figi) is not True:
        return print(f"–¢–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    if not x.startT <= datetime.now().time() <= x.endT:
        return print(f"–¢–æ—Ä–≥–∏ –æ—Ç–∫—Ä—ã—Ç—ã, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    df = new_df(pick_candles(x), x)
    if df.iloc[-1].status == 'BUY' or df.iloc[-1].status == 'SELL':
        make_deal(df.iloc[-1].status, x)
    if df.iloc[-1].fix == 'FIX':
        make_fix(x)


def start_bot():
    for index, row in preparation().iterrows():
        print(f"\n‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï {row['name'].upper()} ‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
        bot(row)
        print('‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï')
    print(f"\n‚ñ†‚ñ†‚ñ† {money_info()} ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† —Å–≤–µ—á–∏ {(datetime.now().minute - 1)} –º–∏–Ω—É—Ç—ã ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\n")
    time.sleep(45)


# go_trade('–∫–∞–∫–∞—è —Ç–æ –∞–º–µ—Ä–∏–∫–∞', 'BBG00HTN2CQ3', 1829, 'SELL', '—Ñ–∏–∫—Å–∞—Ü–∏—è —à–æ—Ä—Ç–∞')


def loop_bot():
    sl.every().minute.at(":50").do(start_bot)
    while True:
        sl.run_pending()


choice = input("'start' —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –∏–ª–∏ –Ω–∞–∂–∞—Ç—å 'enter' –¥–ª—è —Ç–µ—Å—Ç–∞: ")
start_bot() if choice == '' else (loop_bot() if choice == 'start' else print('–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥'))

# loop_bot()
